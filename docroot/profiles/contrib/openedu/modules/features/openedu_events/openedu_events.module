<?php

/**
 * @file
 * Contains event-specific functionality for the OpenEDU distribution.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openedu_events_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-event-latest-events-block') {
    $form['search']['#attributes']['placeholder'] = t("Search events...");
    $form['categories']['#options']['All'] = t("Search By Category");
    $form['audience']['#options']['All'] = t("Search By Audience");

    // Add the module js.
    $form['#attached']['library'][] = 'openedu_profile/openedu-profile';

    // @todo this is not intented as a permenent solution, use better exposed filters when select dropdown is ported.
    // Transform the following entity filter fields into selects.
    $transform_node_select = [
      [
        'field name' => 'field_event_department',
        'node type' => 'department',
        'placeholder' => 'Search By Department',
      ],
    ];

    foreach ($transform_node_select as $field) {
      $field_name = $field['field name'];
      $node_type = $field['node type'];
      $placeholder = $field['placeholder'];
      if (isset($form[$field_name])) {
        $form[$field_name]['#type'] = 'select';
        $form[$field_name]['#size'] = 0;
        $form[$field_name]['#empty_option'] = $placeholder;
        $form[$field_name]['#empty_value'] = '';
        $form[$field_name]['#default_value'] = '';
        $nids = \Drupal::entityQuery('node')
          ->condition('type', $node_type)
          ->execute();
        foreach ($nids as $nid) {
          $node = Node::load($nid);
          $form[$field_name]['#options'][$nid] = $node->getTitle();
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function openedu_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    // Hide autogenerated content fields on events.
    case "node_event_form":
    case "node_event_edit_form":
      $form['field_event_directions']['#attributes']['class'][] = 'hidden';
      $form['field_events_event_map']['#attributes']['class'][] = 'hidden';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_node_presave().
 */
function openedu_events_node_presave(EntityInterface $node) {
  // Autogenerate Get Directions and Map using the Geocoder module for each
  // event on save.
  if ($node->getType() == 'event') {
    $address_value = $node->get('field_event_location')->getValue();
    $map_field = $node->get('field_events_event_map');

    if ($address_value && $map_field) {
      $plugins = ['googlemaps'];
      $address_components = array_filter($address_value[0], function ($component) {
        return !empty($component);
      });
      $address = implode(', ', $address_components);
      $config = \Drupal::service('config.factory')->get('google_map_field.settings');
      $apikey = $config->get('google_map_field_apikey');

      if (empty($apikey)) {
        drupal_set_message(t('You must set a Google Map API key and resave this event for the map to be set.'));
        return;
      }

      $options = ['googlemaps' => ['apiKey' => $apikey, 'useSsl' => TRUE]];

      // Get the Long Lat and store in the Map field.
      if ($addressCollection = \Drupal::service('geocoder')
        ->geocode($address, $plugins, $options)) {
        $address = $addressCollection->get(0);
        $bounds = $address->getBounds();
        $map_values = [
          [
            'lat' => $bounds->getNorth(),
            'lon' => $bounds->getEast(),
            'zoom' => 14,
            'type' => 'roadmap',
            'height' => '300px',
            'marker' => '1',
            'controls' => '1',
            'infowindow' => '',
            'actions' => [],
          ],
        ];
        $get_directions = [
          'title' => t('Get directions'),
          'uri' => 'https://maps.google.com?daddr=' . urlencode(implode('+', $address_components)),
        ];
        $node->set('field_events_event_map', $map_values);
        $node->set('field_event_directions', [$get_directions]);
      }
      else {
        $node->set('field_events_event_map', []);
        $node->set('field_event_directions', []);
      }
    }
  }
}
