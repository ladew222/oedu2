<?php

/**
 * @file
 * Contains date_recur.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\date_recur\Plugin\DateRecurOccurrenceHandlerInterface;
use Drupal\date_recur\Plugin\DateRecurOccurrenceHandlerManager;
use Zend\Stdlib\Exception\InvalidArgumentException;

/**
 * Implements hook_help().
 */
function date_recur_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the date_recur module.
    case 'help.page.date_recur':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Recurring date field.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function date_recur_theme($existing, $type, $theme, $path) {
  return [
    'date_recur_default_formatter' => [
      'variables' => [
        'occurrences' => [],
        'repeatrule' => NULL,
        'date' => NULL,
        'isRecurring' => FALSE,
      ],
    ],
  ];
}

/**
 * @param FieldConfigInterface|FieldStorageConfigInterface|FieldStorageDefinitionInterface $field
 * @return DateRecurOccurrenceHandlerInterface
 */
function date_recur_create_occurrence_handler($field) {
  if ($field->getType() != 'date_recur') {
    throw new InvalidArgumentException("Expected field of type date_recur.");
  }
  $pluginName = $field->getSetting('occurrence_handler_plugin');
  /** @var DateRecurOccurrenceHandlerManager $manager */
  $manager = \Drupal::getContainer()
    ->get('plugin.manager.date_recur_occurrence_handler');
  return $manager->createInstance($pluginName);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for 'field_config'.
 */
function date_recur_field_storage_config_insert(FieldStorageConfigInterface $field) {
  if ($field->getType() == 'date_recur') {
    $plugin = date_recur_create_occurrence_handler($field);
    $plugin->onFieldCreate($field);
  }
}


function date_recur_field_storage_config_update(FieldStorageConfigInterface $field) {
  if ($field->getType() == 'date_recur') {
    $plugin = date_recur_create_occurrence_handler($field);
    $plugin->onFieldUpdate($field);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'field_config'.
 */
function date_recur_field_storage_config_delete(FieldStorageConfigInterface $field) {
  if ($field->getType() == 'date_recur') {
    $plugin = date_recur_create_occurrence_handler($field);
    $plugin->onFieldDelete($field);
  }
}

/**
 * Implements hook_cron().
 */
//function date_recur_cron() {
// @todo Implement like this:
// - Check if some timespan since last run has passed (e.g. 1 month).
// - Use EntityQuery to load all items with infinite = 1.
// - Load those entities.
// - Call DateRecurFieldItemList::postSave().
//}

